package template

import lib "github.com/zokypesch/protoc-gen-react/lib"

var tmplServiceMock = `
// Code generated by sangkuriang protoc-gen-go. DO NOT EDIT.
// source: {{ .FileName }}_{{ .GoPackage }}
// File Location: api/{{ ucfirst (getFirstService .Services).Name }}.ts

import { AxiosResponse, RawAxiosResponseHeaders, InternalAxiosRequestConfig, AxiosRequestHeaders, AxiosHeaders } from 'axios'
import { requestConfig } from '@prakerja/core-fe/build/core/axios.http.client'
{{- range $service := .Services }}
{{- range $method := $service.Methods }}
import { {{- if eq $method.HttpMode "get"}}
{{- if eq $method.Input "empty"}}
{{- else}}
	{{ $method.MessageRequest.Name }},
	{{- end }}
	{{- else}}
	{{ $method.MessageRequest.Name }},
	{{- end }}
	{{ $method.MessageResponse.Name }},
} from './{{ $method.Name }}.types'
{{- end }}
{{- end }}

{{- range $service := .Services }}
{{- range $method := $service.Methods }}

export const {{ $method.Name }} = (
	{{- if eq $method.HttpMode "get"}}
	{{- if eq $method.Input "empty"}}
	{{- else}}
	params: {{ ucfirst $method.Input }},
	{{- end}}
	{{- else}}
	params: {{ ucfirst $method.Input }},
	{{- end}}
	requestConfig: requestConfig,
) => {
	let g: {{ $method.MessageResponse.Name }} = { {{- range $field := $method.MessageResponse.Fields }} {{ if $field.IsAvailableDataExample }}
		{{- if eq $field.TypeData "string" }}
		{{ $field.Name }}: "{{ $field.DataExample }}",
		{{- else }}
		{{ $field.Name }}: {{ $field.DataExample }},
		{{- end }}
		{{- end }}
	{{- end }}
	}
	let cl = new AxiosHeaders()
    let headers: RawAxiosResponseHeaders = {}
    let xInternalHeaders: AxiosRequestHeaders = cl
    let conifg: InternalAxiosRequestConfig{{ unescape "<" }}undefined> = {
        headers: xInternalHeaders,
    }
    let resp: AxiosResponse{{ unescape "<" }}{{ $method.MessageResponse.Name }}, undefined> = {
        data: g,
        status: 200,
        statusText: "OK",
        headers: headers,
        config: conifg
    }
	return new Promise{{ unescape "<" }}AxiosResponse{{ unescape "<" }}{{ $method.MessageResponse.Name }}, undefined>>((resolve) => {
        resolve(resp)
    });
}

{{- end }}
{{- end }}
`

var ServiceMock = lib.List{
	Name:     "GenerateServiceMock",
	FileType: ".service.mock.ts",
	Template: tmplServiceMock,
	Location: "./%s/%s/",
	Lang:     "tsx",
}
